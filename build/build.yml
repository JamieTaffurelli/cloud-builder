parameters:
  poolName: ""

jobs:
  - job:
    timeoutInMinutes: 120
    pool:
      vmImage: ${{ parameters.poolName }}
    steps:

      - task: PowerShell@2	
        displayName: "Install Required PowerShell Modules"	
        inputs:	
          targetType: "filePath"	
          filePath: '$(System.DefaultWorkingDirectory)\scripts\install-modules.ps1'	
          arguments: '@("az", "AzureAD")'	
          errorActionPreference: "stop"	
          failOnStderr: false	
          ignoreLASTEXITCODE: false	
          pwsh: false	
          workingDirectory: "$(System.DefaultWorkingDirectory)"

      - task: Pester.PesterRunner.Pester-Task.Pester@9
        displayName: "Run Unit Tests"
        inputs:
          scriptFolder: '$(System.DefaultWorkingDirectory)\tests\*'
          resultsFile: '$(System.DefaultWorkingDirectory)\test-results.xml'
          CodeCoverageOutputFile: '$(System.DefaultWorkingDirectory)\code-coverage.xml'
          usePSCore: false
          CodeCoverageFolder: '$(System.DefaultWorkingDirectory)\module\cmdlets'
          PesterVersion: 'OtherVersion'
          preferredPesterVersion: '4.10.1'

      - task: PublishTestResults@2
        displayName: "Publish Test Results"
        inputs:
          testResultsFormat: "NUnit"
          testResultsFiles: "test-results.xml"
          searchFolder: "$(System.DefaultWorkingDirectory)"
          mergeTestResults: false
          failTaskOnFailedTests: true
          publishRunAttachments: true
        condition: always()

      - task: PublishCodeCoverageResults@1
        displayName: "Publish Code Coverage"
        inputs:
          codeCoverageTool: "JaCoCo"
          summaryFileLocation: '$(System.DefaultWorkingDirectory)\code-coverage.xml'
          failIfCoverageEmpty: true
        condition: always()

  - job:
    timeoutInMinutes: 120
    pool:
      vmImage: ${{ parameters.poolName }}
    steps:
      - task: PowerShell@2
        displayName: "Exclude Unscannable ARM Templates"
        inputs:
          targetType: "filePath"
          filePath: '$(System.DefaultWorkingDirectory)\scripts\set-azsk-template-exclusions.ps1'
          arguments: "-AsCsv"
          errorActionPreference: "stop"
          failOnStderr: false
          ignoreLASTEXITCODE: false
          pwsh: false

      - task: AzSKARMTemplateChecker@1
        displayName: "Run AzSK ARM Template Checker"
        inputs:
          armTemplateFilePath: '$(System.DefaultWorkingDirectory)\templates'
          skipControlsFromFile: '$(System.DefaultWorkingDirectory)\azsk-control-exceptions.csv'
          excludeFiles: "$(ExclusionTemplates)"
          disableAutoUpdate: false

      - task: PowerShell@2
        displayName: "Install Required PowerShell Modules"
        inputs:
          targetType: "filePath"
          filePath: '$(System.DefaultWorkingDirectory)\scripts\install-modules.ps1'
          arguments: '@("az")'
          errorActionPreference: "stop"
          failOnStderr: false
          ignoreLASTEXITCODE: false
          pwsh: false
          workingDirectory: "$(System.DefaultWorkingDirectory)"

      - task: PowerShell@2
        displayName: "Version ARM Templates"
        inputs:
          targetType: "filePath"
          filePath: '$(System.DefaultWorkingDirectory)\scripts\version-files.ps1'
          errorActionPreference: "stop"
          failOnStderr: false
          ignoreLASTEXITCODE: false
          pwsh: false

      - task: PowerShell@2
        displayName: "Version DSC Configurations"
        inputs:
          targetType: "filePath"
          filePath: '$(System.DefaultWorkingDirectory)\scripts\version-files.ps1'
          arguments: '-SearchFolder "$(System.DefaultWorkingDirectory)\dsc\configurations" -OutputFolder "$(Build.ArtifactStagingDirectory)\dsc\configurations" -FileType "DSC"'
          errorActionPreference: "stop"
          failOnStderr: false
          ignoreLASTEXITCODE: false
          pwsh: false

      - task: PowerShell@2
        displayName: "Version Runbooks"
        inputs:
          targetType: "filePath"
          filePath: '$(System.DefaultWorkingDirectory)\scripts\version-files.ps1'
          arguments: '-SearchFolder "$(System.DefaultWorkingDirectory)\runbooks" -OutputFolder "$(Build.ArtifactStagingDirectory)\runbooks" -FileType "Script"'
          errorActionPreference: "stop"
          failOnStderr: false
          ignoreLASTEXITCODE: false
          pwsh: false

      - task: PublishPipelineArtifact@1
        displayName: "Publish ARM Templates (Pipeline)"
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)\templates'
          artifact: "templates"
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

      - task: CopyFiles@2
        displayName: "Copy Scripts to Staging Directory"
        inputs:
          sourceFolder: '$(System.DefaultWorkingDirectory)\scripts'
          contents: '**\*'
          targetFolder: '$(Build.ArtifactStagingDirectory)\scripts'
          cleanTargetFolder: true
          overWrite: true
          flattenFolders: false
        condition: "and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))"

      - task: PublishPipelineArtifact@1
        displayName: "Publish Scripts (Pipeline)"
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)\scripts'
          artifact: "scripts"
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

      - task: CopyFiles@2
        displayName: "Copy Module to Staging Directory"
        inputs:
          sourceFolder: '$(System.DefaultWorkingDirectory)\module'
          contents: '**\*'
          targetFolder: '$(Build.ArtifactStagingDirectory)\module'
          cleanTargetFolder: true
          overWrite: true
          flattenFolders: false
        condition: "and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))"

      - task: PublishPipelineArtifact@1
        displayName: "Publish Module (Pipeline)"
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)\module'
          artifact: "module"
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

      - task: CopyFiles@2
        displayName: "Copy Template Tests to Staging Directory"
        inputs:
          sourceFolder: '$(System.DefaultWorkingDirectory)\tests\unit\templates'
          contents: '**\*'
          targetFolder: '$(Build.ArtifactStagingDirectory)\tests'
          cleanTargetFolder: true
          overWrite: true
          flattenFolders: false
        condition: "and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))"

      - task: PublishPipelineArtifact@1
        displayName: "Publish Template Tests (Pipeline)"
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)\tests'
          artifact: "tests"
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

      - task: CopyFiles@2
        displayName: "Copy DSC Resources to Staging Directory"
        inputs:
          sourceFolder: '$(System.DefaultWorkingDirectory)\dsc'
          contents: |
            **\*
            !configurations\*
          targetFolder: '$(Build.ArtifactStagingDirectory)\dsc'
          cleanTargetFolder: false
          overWrite: true
          flattenFolders: false
        condition: "and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))"

      - task: PublishBuildArtifacts@1
        displayName: "Publish DSC Resources (Build)"
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)\dsc'
          artifactName: "dsc"
          publishLocation: "Container"
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

      - task: PublishBuildArtifacts@1
        displayName: "Publish Runbooks Resources (Build)"
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)\runbooks'
          artifactName: "runbooks"
          publishLocation: "Container"
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))