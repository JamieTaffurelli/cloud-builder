{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.3.0.0",
  "parameters": {
    "appGatewayName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 80,
      "metadata": {
        "description": "The name of the Application Gateway that you wish to create."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": ["northeurope", "westeurope"],
      "metadata": {
        "description": "The location to deploy the Application Gateway to"
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "WAF_Medium",
      "allowedValues": [
        "WAF_Medium",
        "WAF_Large",
        "WAF_v2",
        "Standard_Small",
        "Standard_Medium",
        "Standard_Large",
        "Standard_v2"
      ],
      "metadata": {
        "description": "The sku of the Application Gateway"
      }
    },
    "capacity": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 0,
      "maxValue": 125,
      "metadata": {
        "description": "The number of instances of the Application Gateway"
      }
    },
    "gatewayIpConfigurations": {
      "type": "array",
      "metadata": {
        "description": "Subnets for the App Gateway, e.g {'name':'ipconfig', 'subnetResourceGroup':'rg', 'virtualNetwork':'vnet', 'subnetName':'subnet' }"
      }
    },
    "authenticationCertificates": {
      "type": "secureObject",
      "defaultValue": {
        "array": []
      },
      "metadata": {
        "description": "Authentication certificates for the App Gateway"
      }
    },
    "trustedRootCertificates": {
      "type": "secureObject",
      "defaultValue": {
        "array": []
      },
      "metadata": {
        "description": "Trusted root certificates for the App Gateway, format is {'name':'', 'properties': {'data':'', keyVaultName:'', 'keyVaultSecretName':''}"
      }
    },
    "sslCertificates": {
      "type": "secureObject",
      "defaultValue": {
        "array": []
      },
      "metadata": {
        "description": "SSL certificates for the App Gateway, format is {'name':'', 'properties': {'data':'', 'password':'', keyVaultName:'', 'keyVaultSecretName':''}"
      }
    },
    "frontendIPConfigurations": {
      "type": "array",
      "minLength": 1,
      "maxLength": 2,
      "metadata": {
        "description": "Frontend IP addresses for the App Gateway"
      }
    },
    "frontendPorts": {
      "type": "array",
      "minLength": 1,
      "maxLength": 100,
      "metadata": {
        "description": "Frontend ports for the App Gateway"
      }
    },
    "probes": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Health probes for the App Gateway"
      }
    },
    "backendAddressPools": {
      "type": "array",
      "minLength": 1,
      "maxLength": 100,
      "metadata": {
        "description": "Backend addresses for the App Gateway"
      }
    },
    "backendHttpSettingsCollection": {
      "type": "array",
      "minLength": 1,
      "maxLength": 100,
      "metadata": {
        "description": "Backend HTTP settings for the App Gateway"
      }
    },
    "httpListeners": {
      "type": "array",
      "minLength": 1,
      "maxLength": 100,
      "metadata": {
        "description": "HTTP listeners for the App Gateway"
      }
    },
    "urlPathMaps": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Health probes for the App Gateway"
      }
    },
    "requestRoutingRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Health probes for the App Gateway"
      }
    },
    "rewriteRuleSets": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Health probes for the App Gateway"
      }
    },
    "redirectConfigurations": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Health probes for the App Gateway"
      }
    },
    "firewallMode": {
      "type": "string",
      "defaultValue": "Prevention",
      "allowedValues": ["Detection", "Prevention"],
      "metadata": {
        "description": "Monitor or block WAF violating traffic"
      }
    },
    "disabledRuleGroups": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Set of disabled WAF rules"
      }
    },
    "maxRequestBodySizeInKb": {
      "type": "int",
      "defaultValue": 128,
      "minValue": 1,
      "maxValue": 128,
      "metadata": {
        "description": "Maximum size allowed for request body in KB"
      }
    },
    "fileUploadLimitInMb": {
      "type": "int",
      "defaultValue": 100,
      "minValue": 1,
      "maxValue": 500,
      "metadata": {
        "description": "Maximum size allowed for uploaded files in MB, max value for standard sku is 100MB and large sku is 500 MB"
      }
    },
    "exclusions": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Exclude request attributes from WAF, properties are 'matchVariable', 'selectorMatchOperator', 'selector'"
      }
    },
    "autoScaleConfiguration": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Enable autoscaling for Application Gateway (only supported for V2), properties are 'minCapacity', 'maxCapacity'"
      }
    },
    "customErrorConfigurations": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Custom Error Pages on Application Gateway for HttpStatus403 or HttpStatus502, properties are 'statusCode', 'customErrorPageUrl'"
      }
    },
    "zones": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Specify zone redundancy for the App Gateway, only supported with V2"
      }
    },
    "logAnalyticsSubscriptionId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]",
      "metadata": {
        "description": "The Subscription ID of the Log Analytics Workspace to send diagnostics to"
      }
    },
    "logAnalyticsResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "The Resource Group of the Log Analytics Workspace to send diagnostics to"
      }
    },
    "logAnalyticsName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Log Analytics Workspace to send diagnostics to"
      }
    },
    "tags": {
      "type": "object"
    }
  },
  "variables": {
    "gatewayIpConfigurations": {
      "copy": [
        {
          "name": "gatewayIpConfigurations",
          "count": "[length(parameters('gatewayIpConfigurations'))]",
          "input": {
            "name": "[parameters('gatewayIpConfigurations')[copyIndex('gatewayIpConfigurations')].name]",
            "properties": {
              "subnet": {
                "id": "[resourceId(if(contains(parameters('gatewayIpConfigurations')[copyIndex('gatewayIpConfigurations')], 'subnetSubscriptionId'), parameters('gatewayIpConfigurations')[copyIndex('gatewayIpConfigurations')].subnetSubscriptionId, subscription().subscriptionId), if(contains(parameters('gatewayIpConfigurations')[copyIndex('gatewayIpConfigurations')], 'subnetResourceGroupName'), parameters('gatewayIpConfigurations')[copyIndex('gatewayIpConfigurations')].subnetResourceGroupName, resourceGroup().name), 'Microsoft.Network/virtualNetworks/subnets', parameters('gatewayIpConfigurations')[copyIndex('gatewayIpConfigurations')].virtualNetworkName, parameters('gatewayIpConfigurations')[copyIndex('gatewayIpConfigurations')].subnetName)]"
              }
            }
          }
        }
      ]
    },
    "trustedRootCertificatesArray": "[parameters('trustedRootCertificates').array]",
    "trustedRootCertificates": {
      "copy": [
        {
          "name": "trustedRootCertificates",
          "count": "[if(empty(variables('trustedRootCertificatesArray')), 1, length(variables('trustedRootCertificatesArray')))]",
          "input": {
            "name": "[if(empty(variables('trustedRootCertificatesArray')), 'dummyName', variables('trustedRootCertificatesArray')[copyIndex('trustedRootCertificates')].name)]",
            "properties": "[if(empty(variables('trustedRootCertificatesArray')), json('{}'), json(concat('{', if(contains(variables('trustedRootCertificatesArray')[copyIndex('trustedRootCertificates')].properties, 'data'), concat('\"data\": \"', variables('trustedRootCertificatesArray')[copyIndex('trustedRootCertificates')].properties.data, '\"'), ''), if(contains(variables('trustedRootCertificatesArray')[copyIndex('trustedRootCertificates')].properties, 'keyVaultName'), concat('\"keyVaultSecretId\": \"', resourceId(if(contains(variables('trustedRootCertificatesArray')[copyIndex('trustedRootCertificates')].properties, 'keyVaultSubscriptionId'), variables('trustedRootCertificatesArray')[copyIndex('trustedRootCertificates')].properties.keyVaultSubscriptionId, subscription().subscriptionId), if(contains(variables('trustedRootCertificatesArray')[copyIndex('trustedRootCertificates')].properties, 'keyVaultResourceGroupName'), variables('trustedRootCertificatesArray')[copyIndex('trustedRootCertificates')].properties.keyVaultResourceGroupName, resourceGroup().name), 'Microsoft.KeyVault/vaults/secrets', variables('trustedRootCertificatesArray')[copyIndex('trustedRootCertificates')].properties.keyVaultName, variables('trustedRootCertificatesArray')[copyIndex('trustedRootCertificates')].properties.keyVaultSecretName), '\"'), ''), '}')))]"
          }
        }
      ]
    },
    "sslCertificatesArray": "[parameters('sslCertificates').array]",
    "sslCertificates": {
      "copy": [
        {
          "name": "sslCertificates",
          "count": "[if(empty(variables('sslCertificatesArray')), 1, length(variables('sslCertificatesArray')))]",
          "input": {
            "name": "[if(empty(variables('sslCertificatesArray')), 'dummyName', variables('sslCertificatesArray')[copyIndex('sslCertificates')].name)]",
            "properties": "[if(empty(variables('sslCertificatesArray')), json('{}'), json(concat('{', if(contains(variables('sslCertificatesArray')[copyIndex('sslCertificates')].properties, 'data'), concat('\"data\": \"', variables('sslCertificatesArray')[copyIndex('sslCertificates')].properties.data, '\"'), ''), if(contains(variables('sslCertificatesArray')[copyIndex('sslCertificates')].properties, 'keyVaultName'), concat('\"keyVaultSecretId\": \"', resourceId(if(contains(variables('sslCertificatesArray')[copyIndex('sslCertificates')].properties, 'keyVaultSubscriptionId'), variables('sslCertificatesArray')[copyIndex('sslCertificates')].properties.keyVaultSubscriptionId, subscription().subscriptionId), if(contains(variables('sslCertificatesArray')[copyIndex('sslCertificates')].properties, 'keyVaultResourceGroupName'), variables('sslCertificatesArray')[copyIndex('sslCertificates')].properties.keyVaultResourceGroupName, resourceGroup().name), 'Microsoft.KeyVault/vaults/secrets', variables('sslCertificatesArray')[copyIndex('sslCertificates')].properties.keyVaultName, variables('sslCertificatesArray')[copyIndex('sslCertificates')].properties.secretName), '\"'), ''), if(contains(variables('sslCertificatesArray')[copyIndex('sslCertificates')].properties, 'password'), concat(',\"password\": \"', variables('sslCertificatesArray')[copyIndex('sslCertificates')].properties.password, '\"'), ''), '}')))]"
          }
        }
      ]
    },
    "frontendIPConfigurations": {
      "copy": [
        {
          "name": "frontendIPConfigurations",
          "count": "[length(parameters('frontendIPConfigurations'))]",
          "input": {
            "name": "[parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')].name]",
            "properties": "[if(contains(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'publicIPAddressName'), json(concat('{ \"publicIPAddress\": {\"id\": \"', resourceId(if(contains(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'publicIPAddressSubscriptionId'), parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')].publicIPAddressSubscriptionId, subscription().subscriptionId), if(contains(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'publicIPAddressResourceGroupName'), parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')].publicIPAddressResourceGroupName, resourceGroup().name), 'Microsoft.Network/publicIPAddresses', parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')].publicIPAddressName), '\"}}')), json(concat('{', if(contains(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'privateIPAllocationMethod'), concat('\"privateIPAllocationMethod\": \"', parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')].privateIPAllocationMethod, '\",'), ''), if(contains(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'privateIPAddress'), concat('\"privateIPAddress\": \"', parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')].privateIPAddress, '\",'), ''),'\"subnet\": {\"id\": \"', resourceId(if(contains(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'subnetSubscriptionId'), parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')].subnetSubscriptionId, subscription().subscriptionId), if(contains(parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')], 'subnetResourceGroupName'), parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')].subnetResourceGroupName, resourceGroup().name), 'Microsoft.Network/virtualNetworks/subnets', parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')].virtualNetworkName, parameters('frontendIPConfigurations')[copyIndex('frontendIPConfigurations')].subnetName), '\"}}')))]"
          }
        }
      ]
    },
    "connectionDraining": {
      "enabled": true,
      "drainTimeoutInSec": 300
    },
    "backendHttpSettingsCollectionWithoutHostName": {
      "copy": [
        {
          "name": "backendHttpSettingsCollectionWithoutHostName",
          "count": "[length(parameters('backendHttpSettingsCollection'))]",
          "input": {
            "name": "[parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].name]",
            "properties": {
              "port": "[parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties.port]",
              "protocol": "[parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties.protocol]",
              "cookieBasedAffinity": "[if(contains(parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties, 'cookieBasedAffinity'), parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties.cookieBasedAffinity, 'Disabled')]",
              "requestTimeout": "[if(contains(parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties, 'requestTimeout'), parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties.requestTimeout, 30)]",
              "probe": "[if(or(not(contains(parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties, 'probe')), empty(parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties.probe)), json('{}'), json(concat('{ \"id\": \"', resourceId('Microsoft.Network/applicationGateways/probes', parameters('appGatewayName'), parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties.probe.name), '\" }')))]",
              "authenticationCertificates": "[if(or(not(contains(parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties, 'authenticationCertificates')), empty(parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties.authenticationCertificates)), json('[]'),  parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties.authenticationCertificates)]",
              "trustedRootCertificates": "[if(or(not(contains(parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties, 'trustedRootCertificates')), empty(parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties.trustedRootCertificates)), json('[]'),  parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties.trustedRootCertificates)]",
              "connectionDraining": "[if(or(not(contains(parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties, 'connectionDraining')), empty(parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties.connectionDraining)), variables('connectionDraining'),  parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties.connectionDraining)]",
              "pickHostNameFromBackendAddress": "[if(not(contains(parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties, 'pickHostNameFromBackendAddress')), json('false'),  parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties.pickHostNameFromBackendAddress)]",
              "affinityCookieName": "[if(or(not(contains(parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties, 'affinityCookieName')), empty(parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties.affinityCookieName)), json('null'),  parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties.affinityCookieName)]",
              "path": "[if(or(not(contains(parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties, 'path')), empty(parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties.path)), json('null'),  parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollectionWithoutHostName')].properties.path)]"
            }
          }
        }
      ]
    },
    "backendHttpSettingsCollection": {
      "copy": [
        {
          "name": "backendHttpSettingsCollection",
          "count": "[length(parameters('backendHttpSettingsCollection'))]",
          "input": {
            "name": "[parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollection')].name]",
            "properties": "[if(contains(parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollection')].properties, 'hostName'), union(variables('backendHttpSettingsCollectionWithoutHostName')[copyIndex('backendHttpSettingsCollection')].properties, json(concat('{\"hostname\": \"', parameters('backendHttpSettingsCollection')[copyIndex('backendHttpSettingsCollection')].properties.hostname, '\"}'))), variables('backendHttpSettingsCollectionWithoutHostName').backendHttpSettingsCollectionWithoutHostName[copyIndex('backendHttpSettingsCollection')].properties)]"
          }
        }
      ]
    },
    "httpListeners": {
      "copy": [
        {
          "name": "httpListeners",
          "count": "[length(parameters('httpListeners'))]",
          "input": {
            "name": "[parameters('httpListeners')[copyIndex('httpListeners')].name]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', parameters('appGatewayName'), parameters('httpListeners')[copyIndex('httpListeners')].properties.frontendIPConfiguration.name)]"
              },
              "frontendPort": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', parameters('appGatewayName'), parameters('httpListeners')[copyIndex('httpListeners')].properties.frontendPort.name)]"
              },
              "protocol": "[parameters('httpListeners')[copyIndex('httpListeners')].properties.protocol]",
              "hostName": "[parameters('httpListeners')[copyIndex('httpListeners')].properties.hostName]",
              "sslCertificate": "[if(not(contains(parameters('httpListeners')[copyIndex('httpListeners')].properties, 'sslCertificate')), json('null'), json(concat('{\"id\": \"', resourceId('Microsoft.Network/applicationGateways/sslCertificates', parameters('appGatewayName'), parameters('httpListeners')[copyIndex('httpListeners')].properties.sslCertificate.name), '\" }')))]",
              "requireServerNameIndication": "[if(equals(parameters('httpListeners')[copyIndex('httpListeners')].properties.protocol, 'https'), json('true'), json('null'))]",
              "customErrorConfigurations": "[if(not(contains(parameters('httpListeners')[copyIndex('httpListeners')].properties, 'customErrorConfigurations')), json('[]'), parameters('httpListeners')[copyIndex('httpListeners')].properties.customErrorConfigurations)]"
            }
          }
        }
      ]
    },
    "urlPathMaps": {
      "copy": [
        {
          "name": "urlPathMaps",
          "count": "[if(empty(parameters('urlPathMaps')), 1, length(parameters('urlPathMaps')))]",
          "input": {
            "name": "[if(empty(parameters('urlPathMaps')), 'dummyName', parameters('urlPathMaps')[copyIndex('urlPathMaps')].name)]",
            "properties": {
              "defaultBackendAddressPool": "[if(empty(parameters('urlPathMaps')), 'dummyBackendAddressPool', if(not(contains(parameters('urlPathMaps')[copyIndex('urlPathMaps')].properties, 'defaultBackendAddressPool')), json('null'), json(concat('{\"id\": \"', resourceId('Microsoft.Network/applicationGateways/backendAddressPools', parameters('appGatewayName'), parameters('urlPathMaps')[copyIndex('urlPathMaps')].properties.defaultBackendAddressPool.name), '\" }'))))]",
              "defaultBackendHttpSettings": "[if(empty(parameters('urlPathMaps')), 'dummyBackendHttpSettings', if(not(contains(parameters('urlPathMaps')[copyIndex('urlPathMaps')].properties, 'defaultBackendHttpSettings')), json('null'), json(concat('{\"id\": \"', resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('appGatewayName'), parameters('urlPathMaps')[copyIndex('urlPathMaps')].properties.defaultBackendHttpSettings.name), '\" }'))))]",
              "defaultRewriteRuleSet": "[if(empty(parameters('urlPathMaps')), 'dummyRewriteRuleSet', if(not(contains(parameters('urlPathMaps')[copyIndex('urlPathMaps')].properties, 'defaultRewriteRuleSet')), json('null'), json(concat('{\"id\": \"', resourceId('Microsoft.Network/applicationGateways/rewriteRuleSets', parameters('appGatewayName'), parameters('urlPathMaps')[copyIndex('urlPathMaps')].properties.defaultRewriteRuleSet.name), '\" }'))))]",
              "defaultRedirectConfiguration": "[if(empty(parameters('urlPathMaps')), 'dummyRedirectConfiguration', if(not(contains(parameters('urlPathMaps')[copyIndex('urlPathMaps')].properties, 'defaultRedirectConfiguration')), json('null'), json(concat('{\"id\": \"', resourceId('Microsoft.Network/applicationGateways/redirectConfigurations', parameters('appGatewayName'), parameters('urlPathMaps')[copyIndex('urlPathMaps')].properties.defaultRedirectConfiguration.name), '\" }'))))]",
              "pathRules": "[if(empty(parameters('urlPathMaps')), 'dummyRedirectConfiguration', if(not(contains(parameters('urlPathMaps')[copyIndex('urlPathMaps')].properties, 'pathRules')), json('[]'), parameters('urlPathMaps')[copyIndex('urlPathMaps')].properties.pathRules))]"
            }
          }
        }
      ]
    },
    "requestRoutingRules": {
      "copy": [
        {
          "name": "requestRoutingRules",
          "count": "[length(parameters('requestRoutingRules'))]",
          "input": {
            "name": "[parameters('requestRoutingRules')[copyIndex('requestRoutingRules')].name]",
            "properties": {
              "httpListener": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', parameters('appGatewayName'), parameters('requestRoutingRules')[copyIndex('requestRoutingRules')].properties.httpListener.name)]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', parameters('appGatewayName'), parameters('requestRoutingRules')[copyIndex('requestRoutingRules')].properties.backendAddressPool.name)]"
              },
              "backendHttpSettings": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', parameters('appGatewayName'), parameters('requestRoutingRules')[copyIndex('requestRoutingRules')].properties.backendHttpSettings.name)]"
              },
              "urlPathMap": "[if(not(contains(parameters('requestRoutingRules')[copyIndex('requestRoutingRules')].properties, 'urlPathMap')), json('null'), json(concat('{\"id\": \"', resourceId('Microsoft.Network/applicationGateways/urlPathMaps', parameters('appGatewayName'), parameters('requestRoutingRules')[copyIndex('requestRoutingRules')].properties.urlPathMap.name), '\" }')))]",
              "rewriteRuleSet": "[if(not(contains(parameters('requestRoutingRules')[copyIndex('requestRoutingRules')].properties, 'rewriteRuleSet')), json('null'), json(concat('{\"id\": \"', resourceId('Microsoft.Network/applicationGateways/rewriteRuleSets', parameters('appGatewayName'), parameters('requestRoutingRules')[copyIndex('requestRoutingRules')].properties.rewriteRuleSet.name), '\" }')))]",
              "redirectConfiguration": "[if(not(contains(parameters('requestRoutingRules')[copyIndex('requestRoutingRules')].properties, 'redirectConfiguration')), json('null'), json(concat('{\"id\": \"', resourceId('Microsoft.Network/applicationGateways/redirectConfigurations', parameters('appGatewayName'), parameters('requestRoutingRules')[copyIndex('requestRoutingRules')].properties.redirectConfiguration.name), '\" }')))]"
            }
          }
        }
      ]
    },
    "diagnosticsEnabled": true,
    "diagnosticsRetentionInDays": 365
  },
  "resources": [
    {
      "name": "[parameters('appGatewayName')]",
      "type": "Microsoft.Network/applicationGateways",
      "apiVersion": "2019-04-01",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "sku": {
          "name": "[parameters('skuName')]",
          "capacity": "[parameters('capacity')]"
        },
        "sslPolicy": {
          "policyType": "Predefined",
          "policyName": "AppGwSslPolicy20170401S"
        },
        "gatewayIPConfigurations": "[variables('gatewayIpConfigurations').gatewayIpConfigurations]",
        "authenticationCertificates": "[parameters('authenticationCertificates').array]",
        "trustedRootCertificates": "[if(empty(variables('trustedRootCertificatesArray')), json('[]'), variables('trustedRootCertificates').trustedRootCertificates)]",
        "sslCertificates": "[if(empty(variables('sslCertificates')), json('[]'), variables('sslCertificates').sslCertificates)]",
        "frontendIPConfigurations": "[variables('frontendIPConfigurations').frontendIPConfigurations]",
        "frontendPorts": "[parameters('frontendPorts')]",
        "probes": "[parameters('probes')]",
        "backendAddressPools": "[parameters('backendAddressPools')]",
        "backendHttpSettingsCollection": "[variables('backendHttpSettingsCollection').backendHttpSettingsCollection]",
        "httpListeners": "[variables('httpListeners').httpListeners]",
        "urlPathMaps": "[if(empty(parameters('urlPathMaps')), json('[]'), variables('urlPathMaps').urlPathMaps)]",
        "requestRoutingRules": "[variables('requestRoutingRules').requestRoutingRules]",
        "rewriteRuleSets": "[parameters('rewriteRuleSets')]",
        "redirectConfigurations": "[parameters('redirectConfigurations')]",
        "webApplicationFirewallConfiguration": {
          "enabled": true,
          "firewallMode": "[parameters('firewallMode')]",
          "ruleSetType": "OWASP",
          "ruleSetVersion": "3.0",
          "disabledRuleGroups": "[parameters('disabledRuleGroups')]",
          "requestBodyCheck": true,
          "maxRequestBodySizeInKb": "[parameters('maxRequestBodySizeInKb')]",
          "fileUploadLimitInMb": "[parameters('fileUploadLimitInMb')]",
          "exclusions": "[parameters('exclusions')]"
        },
        "enableHttp2": true,
        "autoscaleConfiguration": "[if(empty(parameters('autoScaleConfiguration')), json('null'), parameters('autoScaleConfiguration'))]",
        "customErrorConfigurations": "[parameters('customErrorConfigurations')]"
      },
      "zones": "[parameters('zones')]",
      "resources": [
        {
          "apiVersion": "2015-07-01",
          "type": "/providers/diagnosticSettings",
          "name": "Microsoft.Insights/service",
          "properties": {
            "metrics": [
              {
                "category": "AllMetrics",
                "enabled": "[variables('diagnosticsEnabled')]",
                "retentionPolicy": {
                  "enabled": "[variables('diagnosticsEnabled')]",
                  "days": "[variables('diagnosticsRetentionInDays')]"
                }
              }
            ],
            "logs": [
              {
                "category": "ApplicationGatewayAccessLog",
                "enabled": "[variables('diagnosticsEnabled')]",
                "retentionPolicy": {
                  "enabled": "[variables('diagnosticsEnabled')]",
                  "days": "[variables('diagnosticsRetentionInDays')]"
                }
              },
              {
                "category": "ApplicationGatewayPerformanceLog",
                "enabled": "[variables('diagnosticsEnabled')]",
                "retentionPolicy": {
                  "enabled": "[variables('diagnosticsEnabled')]",
                  "days": "[variables('diagnosticsRetentionInDays')]"
                }
              },
              {
                "category": "ApplicationGatewayFirewallLog",
                "enabled": "[variables('diagnosticsEnabled')]",
                "retentionPolicy": {
                  "enabled": "[variables('diagnosticsEnabled')]",
                  "days": "[variables('diagnosticsRetentionInDays')]"
                }
              }
            ],
            "workspaceId": "[resourceId(parameters('logAnalyticsSubscriptionId'), parameters('logAnalyticsResourceGroupName'), 'Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsName'))]"
          },
          "dependsOn": [
            "[concat('Microsoft.Network/applicationGateways/', parameters('appGatewayName'))]"
          ]
        }
      ]
    }
  ],
  "outputs": {
    "applicationGateway": {
      "type": "object",
      "value": "[reference(resourceId('Microsoft.Network/applicationGateways', parameters('appGatewayName')), '2019-04-01', 'Full')]"
    }
  }
}
